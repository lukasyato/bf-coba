name: Deploy Laravel App
on:
  push:
    branches:
      - main
      - main-scan

jobs:
  deploy-main:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Get EC2 public IPs from Target Group
        id: fetch_hosts
        run: |
          TG_NAME="BF Coba Scale"
          TG_ARN=$(aws elbv2 describe-target-groups \
            --names "$TG_NAME" \
            --query "TargetGroups[0].TargetGroupArn" \
            --output text)

          echo "🎯 Target Group ARN: $TG_ARN"

          INSTANCE_IDS=$(aws elbv2 describe-target-health \
            --target-group-arn "$TG_ARN" \
            --query "TargetHealthDescriptions[*].Target.Id" \
            --output text)

          echo "🧩 Found instance IDs: $INSTANCE_IDS"

          if [ -z "$INSTANCE_IDS" ]; then
            echo "❌ No healthy targets found in Target Group: $TG_NAME"
            exit 1
          fi

          HOSTS=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_IDS \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text | tr '\t' ',')

          echo "✅ Found public IPs: $HOSTS"

          echo "hosts=$HOSTS" >> $GITHUB_OUTPUT

      - name: Deploy to all EC2 instances
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.fetch_hosts.outputs.hosts }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd /var/www/bf-coba
            sudo git pull origin main

      - name: Create new AMI from source EC2
        id: create_ami
        run: |
          INSTANCE_ID="i-01550e23a910daf70"
          DATE=$(date +%Y%m%d-%H%M%S)
          AMI_NAME="bf-coba-${DATE}"
          
          AMI_ID=$(aws ec2 create-image \
            --instance-id $INSTANCE_ID \
            --name "$AMI_NAME" \
            --description "AMI from GitHub deploy $DATE" \
            --no-reboot \
            --query 'ImageId' \
            --output text)

          echo "AMI_ID=$AMI_ID"
          echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT

      - name: Wait for AMI to become available
        run: |
          AMI_ID=${{ steps.create_ami.outputs.ami_id }}

          echo "⏳ Waiting for AMI to be available..."
          aws ec2 wait image-available --image-ids $AMI_ID
          echo "✅ AMI $AMI_ID is now available."

      - name: Update Launch Template to use new AMI
        id: update_lt
        run: |
          LAUNCH_TEMPLATE_NAME="bf_coba"
          AMI_ID=${{ steps.create_ami.outputs.ami_id }}

          echo "🔧 Creating new launch template version with AMI $AMI_ID..."

          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-name $LAUNCH_TEMPLATE_NAME \
            --source-version 1 \
            --launch-template-data "{\"ImageId\":\"$AMI_ID\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)

          echo "New launch template version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Set Default Launch Template Version
        run: |
          aws ec2 modify-launch-template \
            --launch-template-name "bf_coba" \
            --default-version ${{ steps.update_lt.outputs.version }}

          echo "✅ Launch template now defaults to AMI ${{ steps.create_ami.outputs.ami_id }}"

